import { type Dispatch, type SetStateAction, useState } from 'react';

import {
  AlertBox,
  CodeSnippet,
  Form,
  LearnMoreMessage,
  Modal,
} from '@/components';
import { constants } from '@/constants';
import type { Create2FAFormResponse, Create2FAFormValues } from '@/types/2FA';
import type { LoadingProps } from '@/types/Props';
import { Button, Dialog, Divider, Icon, Stepper, Text } from '@/ui';

import { Styles as S } from '../2FAStyles.styles';
import { RecoveryCodes } from './RecoveryCodes';
import { UnableToScanMessage } from './UnableToScanMessage';

export type SetupModalProps = {
  otpUrl: string;
  isLoading?: boolean;
} & Dialog.RootProps;

export const SetupModal: React.FC<SetupModalProps> = ({
  otpUrl,
  isLoading,
  ...dialogProps
}) => {
  const [recoveryCodes, setRecoveryCodes] = useState<string[]>();

  const handleResetModal = () => {
    setRecoveryCodes([]);
  };

  return (
    <Dialog.Root {...dialogProps}>
      <Dialog.Overlay />
      <Dialog.Portal>
        <Stepper.Root initialStep={1}>
          <Modal.Content>
            <Stepper.Container>
              <Stepper.Step>
                <Stepper.Indicator />
                <Step1
                  otpUrl={otpUrl}
                  handleSetRecoveryCodes={setRecoveryCodes}
                  handleResetModal={handleResetModal}
                  isLoading={isLoading}
                />
              </Stepper.Step>
              <Stepper.Step>
                <Stepper.Indicator />
                <Step2 recoveryCodes={recoveryCodes} isLoading={isLoading} />
              </Stepper.Step>
            </Stepper.Container>
          </Modal.Content>
        </Stepper.Root>
      </Dialog.Portal>
    </Dialog.Root>
  );
};

type Step1Props = {
  handleSetRecoveryCodes: Dispatch<SetStateAction<string[] | undefined>>;
  handleResetModal: () => void;
} & LoadingProps<{ otpUrl: string }>;

const Step1: React.FC<Step1Props> = ({
  otpUrl,
  handleSetRecoveryCodes,
  isLoading,
}) => {
  const [isUnableToScan, setIsUnableToScan] = useState<boolean>(false);
  const secretKeyField = Form.useField<string>('secretKey');

  const { shouldDisableSubmit, isSubmitting, submit } = Form.useContext<
    Create2FAFormValues,
    Create2FAFormResponse
  >();
  const { nextStep, setStep } = Stepper.useContext();

  const handleUnableToScan = () => {
    setIsUnableToScan(true);
  };

  const handleSubmitForm = async () => {
    submit().then((result) => {
      if (result) {
        if (!result.isVerified) {
          return;
        }

        nextStep();

        if (result.recoveryCodes) {
          handleSetRecoveryCodes(result.recoveryCodes);

          return;
        }
      }
    });
  };

  const reset = () => {
    setStep(1);
  };

  return (
    <>
      <Modal.Heading>Set up authenticator app</Modal.Heading>
      <Text>
        Follow the steps below to secure your account with two-factor
        authentication.
      </Text>
      <S.TextSection>
        <Text variant="primary" weight={700}>
          Scan the QR code
        </Text>
        <Text>Use an authenticator app to scan the code below.</Text>
        <S.QrContainer isLoading={isLoading}>
          {isLoading || !otpUrl ? (
            <Icon name="spinner" />
          ) : (
            <S.QRCode value={otpUrl} />
          )}
        </S.QrContainer>
      </S.TextSection>
      <UnableToScanMessage onClick={handleUnableToScan} />
      {isUnableToScan && (
        <CodeSnippet
          title="Setup key"
          code={secretKeyField.value}
          isLoading={isLoading}
        />
      )}
      <Divider />
      <S.TextSection>
        <Text variant="primary" weight={700}>
          Verify code
        </Text>
        <Text>Enter the code generated by the app where you set this up.</Text>
      </S.TextSection>
      <Form.InputField
        name="token"
        disableValidMessage
        type="number"
        maxLength={6}
      />
      <LearnMoreMessage
        prefix="Need help? Follow the instructions"
        href={constants.EXTERNAL_LINK.FLEEK_DOCS_2FA_SETUP}
      >
        here
      </LearnMoreMessage>
      <Modal.CTARow>
        <Dialog.Close asChild>
          <Button intent="neutral" className="flex-1" onClick={reset}>
            Cancel
          </Button>
        </Dialog.Close>
        <Button
          loading={isSubmitting}
          disabled={shouldDisableSubmit || isLoading}
          onClick={handleSubmitForm}
          className="flex-1"
        >
          Continue
        </Button>
      </Modal.CTARow>
    </>
  );
};

type Step2Props = {
  recoveryCodes?: string[];
  isLoading?: boolean;
};

const Step2: React.FC<Step2Props> = ({ recoveryCodes, isLoading }) => {
  const [hasDownloadedCodes, setHasDownloadedCodes] = useState<boolean>(false);
  const { setStep } = Stepper.useContext();

  const handleDownloadCodes = () => {
    setHasDownloadedCodes(true);
  };

  const reset = () => setStep(1);

  return (
    <>
      <Modal.Heading>Download your recovery codes</Modal.Heading>
      <Text>
        You can use recovery codes as a second factor to authenticate in case
        you lose access to your device.
      </Text>
      <AlertBox variant="warning" size="sm">
        Keep your recovery codes in a safe spot.
      </AlertBox>
      <RecoveryCodes
        codes={recoveryCodes}
        handleDownloadCodes={handleDownloadCodes}
        isLoading={isLoading || !recoveryCodes || recoveryCodes.length === 0}
      />
      <LearnMoreMessage
        prefix="Need Help?"
        href={constants.EXTERNAL_LINK.FLEEK_DOCS_2FA_RECOVERY_CODES}
      >
        Follow Instructions Here
      </LearnMoreMessage>
      <Modal.CTARow>
        <Dialog.Close asChild>
          <Button intent="neutral" onClick={reset} className="flex-1">
            Cancel
          </Button>
        </Dialog.Close>
        <Dialog.Close asChild>
          <Button
            disabled={!hasDownloadedCodes}
            onClick={reset}
            className="flex-1"
          >
            I saved my codes
          </Button>
        </Dialog.Close>
      </Modal.CTARow>
    </>
  );
};
