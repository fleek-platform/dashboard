#!/bin/bash

# Parse env
# This is generated by the `start_dev_server` script
# which is assumed to start prior to executing this process
source .tests/.env

# Required vars (shared)
source .scripts/test_runner_vars

SERVER_PORT="$NEXT_DEV_SERVER_PORT"
skip_http_server_await=0
current_has_signature=$(.scripts/test_run_hash_signature)
hash=$(echo "$current_has_signature" | cut -d ' ' -f2)

if [[ "$UI_TEST_DEV_SERVER_MODE" = "build" ]]; then
  SERVER_PORT="$UI_TEST_HTTP_SERVER_PORT"

  if ! lsof -i :3001 | grep -q LISTEN; then
    .scripts/test_runner_http_server 2>&1 &
  else
    skip_http_server_await=1
    echo "🤖 Skipping server initialisation! Test runner static HTTP server's already running."
  fi
fi

# Should wait for development server readyness
[[ "$skip_http_server_await" -eq 0 ]] && .scripts/await_dev_server "$SERVER_PORT"

onFailure() {
  echo "👹 Oops! Test runner failed!"
  exit 1
}

trap cleanup SIGINT SIGTERM

echo "🤖 Should start the e2e tests..."

if [[ "$UI_TEST_DEV_SERVER_MODE" = "build" ]]; then
  current_build_hash_signature=$(cat "$build_hash_path")

  if [[ "$current_has_signature" != "$current_build_hash_signature" ]]; then
    echo "⚠️ WARNING: You are running in test build mode. The source-code has changed since last test run. In order to test the current source-code version, we must build the project."

    while read -rp "❓Do you want to build the project now (yes/no)? " answer; do
      if [[ "$answer" == [nN] || "$answer" == [nN][oO] ]]; then
  	  echo "🦖 Exited the process. You must build the project otherwise you'll not be testing the latest changes."
  	  exit 1
      elif [[ "$answer" == [yY] || "$answer" == [yY][eE][sS] ]]; then
        echo "🙏 The build process will now start, be patient..."

        if ! pnpm build; then
          echo "👹 Oops! Failed to build the project. Check the build output to troubleshoot."
          exit 1
        fi
        
        break;
      fi
	
      echo  "💩 Uh-oh! We expect a yes or no answer. Try again...\n"
    done;
  fi
fi

if ! pnpm run test:e2e; then
  onFailure
fi

echo "🤖 Should start the unit tests..."
if ! pnpm run test:unit; then
  onFailure
fi

if [[ -z "$hash" ]]; then
  echo "👹 Oops! Failed to hash source directory for test runner"
  exit 1
fi

.scripts/test_run_hash_signature > "$info_path"

echo
echo "✅ Test runner completed!"
