name: 💍 Tester runner

on:
  workflow_dispatch:
  push:

permissions:
  actions: read
  contents: read

jobs:
  checkups:
    runs-on: ubuntu-latest
    continue-on-error: false
    env:
      # TODO: For testing CI/CD only
      # use dashboard settings instead
      NEXT_DEV_SERVER_PORT: 3001
      HUSKY: 0
    timeout-minutes: 5
    outputs:
      should_run_tests: ${{ steps.check_if_test_run_required.outputs.should_run_tests }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
          fetch-depth: 0

      # Help reduce number of executions for cost saving
      # due to need of large runners, e.g. `macos-latest-large`
      - name: Local test run checkup
        run: |
          if ! .scripts/has_local_test_run; then
            echo "👹 Oops! Seems that local tests haven't been run. Please run tests locally and commit any changes before pushing."
            exit 1
          fi

          echo "✅ Local tests were run!"

      # A test run hash is an artifact
      # generated after a succesful test
      # We can use this information to prevent
      # executing test runs for unchanged source
      # - name: Check for test run hash
      #   id: has_test_run_hash
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     ghToken="$GITHUB_TOKEN"
      #     orgRepo="fleek-platform/dashboard"
      #     targetArtifactFilename="test_run_hash"

      #     if ! .scripts/download_artifact "$ghToken" "$orgRepo" "$targetArtifactFilename"; then
      #       echo "👹 Oops! Failed to download artifact $targetArtifactFilename"
      #       exit 1
      #     fi

      #     source .scripts/test_runner_vars
      #     current_hash=$(.scripts/hash_dir "$csv_paths")
      #     expected="[TEST_RUN] $current_hash"
      #     artifact_content=$(cat "$targetArtifactFilename")

      #     if [[ "$artifact_content" = "$expected" ]]; then
      #       echo "match=true" >> "$GITHUB_OUTPUT"
      #       echo "✅ Found a test run hash"
      #     else
      #       echo "match=false" >> "$GITHUB_OUTPUT"
      #       echo "⚠️A test run hash wasn't found"
      #     fi

      # It checks if a test has already run
      # for the current source state
      - name: Check if test run required
        id: check_if_test_run_required
        run: |
          if [[ ! -f test_run_hash ]]; then
            echo "should_run_tests=true" >> "$GITHUB_OUTPUT"
            echo "⚠️Test run hash not found, will proceed and run tests..."
          else
            source .scripts/test_runner_vars

            latest_test_run_hash=$(cat test_run_hash)
            current_hash=$(.scripts/hash_dir "$csv_paths")
            expected_hash="[TEST_RUN] $current_hash"

            if [[ "$latest_test_run_hash" = "$expected_hash" ]]; then
              echo "⚠️ Tests already ran successfully!"
              echo "should_run_tests=false" >> "$GITHUB_OUTPUT"
            else
              echo "should_run_tests=true" >> "$GITHUB_OUTPUT"
              echo "🤖 Should proceed and run tests..."
            fi            
          fi

  run_tests:
    needs: checkups
    if: ${{ needs.checkups.outputs.should_run_tests == 'true' }}
    runs-on: macos-latest-xlarge
    continue-on-error: false
    timeout-minutes: 15
    env:
      # TODO: For testing CI/CD only
      # use dashboard settings instead
      # TODO: Use doppler, see deploy and possibly make reusable
      NEXT_PUBLIC_SDK__AUTHENTICATION_URL: "https://graphql.service.staging.fleeksandbox.xyz/graphql"
      NEXT_PUBLIC_UI_FLEEK_REST_API_URL: "https://api.staging.fleeksandbox.xyz"
      NEXT_PUBLIC_UI__DYNAMIC_ENVIRONMENT_ID: "c4d4ccad-9460-419c-9ca3-494488f8c892"
      NEXT_PUBLIC_UI__FEEDBACK_FISH_PROJECT_ID: "ece374513b4e20"
      NEXT_PUBLIC_UI__GTM_ID: "GTM-5RC2N5H"
      NEXT_PUBLIC_UI__LAUNCH_DARKLY_CLIENT_ID: "65c3a5a6319ed30fd0b640a4"
      NEXT_PUBLIC_UI__LOG_ROCKET_ID: "0pggxb/stg-kr0yz"
      NEXT_PUBLIC_UI__POSTHOG_HOST: "https://us.i.posthog.com"
      NEXT_PUBLIC_UI__POSTHOG_KEY: "phc_trRjv1UAiR7m8JkbV3gA6hJdrl2nUjme1cVDmQCnAZ4"
      NEXT_PUBLIC_UI__SITE_SLUG_DOMAIN: "stg.on-fleek-test.app"
      NEXT_PUBLIC_UI__STRIPE_PUBLIC_KEY: "pk_test_CJZoF6F9uT47IWH2gtdoxvOn"
      NEXT_PUBLIC_UI__WEB3AUTH_CLIENT_ID: "BKqrNFQNjQpRlWBgt7OA3S6P1MTP3ispI1lXR48cl6xW6bwFBNRH0Smuw83hp_cT_rUFo1OJvgQD0R8ZQD85ybQ"
      NEXT_PUBLIC_UI__ZENDESK_PROXY_API: "https://support-prod-eu-lon-1-01.flkservices.io"
      NEXT_PUBLIC_ZENDESK_PROXY_HOSTNAME: "support-prod-eu-lon-1-01.flkservices.io"
      NEXT_PUBLIC_UI__UPLOAD_PROXY_API_URL: "https://uploads.service.staging.fleeksandbox.xyz"
      NEXT_PUBLIC_UI__INTERNAL_IPFS_STORAGE_HOSTNAME: "storage-ipfs.internal.staging.fleeksandbox.xyz"
      NEXT_DEV_SERVER_PORT: 3001
      NEXT_PUBLIC_TEST_MODE: 1
      NODE_ENV: 'development'
      HUSKY: 0
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install
        run: pnpm i

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Start development server in background
        run: |
          pnpm dev &
          .scripts/await_dev_server "$NEXT_DEV_SERVER_PORT"

      - name: Run E2E tests
        env:
          PLAYWRIGHT_WORKERS: 2
        run: |
          if ! pnpm test:e2e; then
            echo "👹 Oops! E2E test run failed"
            exit 1
          fi

      - name: Run Component Functional tests
        run: |
          if ! pnpm test:component; then
            echo "👹 Oops! Component Functional tests run failed"
            exit 1
          fi

      - name: Run Unit tests
        run: |
          if ! pnpm test:unit; then
            echo "👹 Oops! Unit Test run failed"
            exit 1
          fi

      - name: Update test hash
        run: |
          if ! cp .tests/hash test_run_hash; then
            echo "👹 Oops! Failed to save test hash artifact"
            exit 1
          fi

      - name: Upload test run hash artifact
        uses: actions/upload-artifact@v4
        with:
          name: test_run_hash
          path: test_run_hash
